#!/usr/bin/env python
"""
Script para popular o banco de dados com dados de teste realistas.

Popula todas as tabelas do sistema com dados variados:
- Usu√°rios (alunos e professores)
- Cursos e per√≠odos letivos
- Disciplinas e turmas
- Matr√≠culas e hor√°rios
- Question√°rios e perguntas
- Ciclos de avalia√ß√£o
- Avalia√ß√µes e respostas

Uso:
    python scripts/popular_banco_dados.py
    python scripts/popular_banco_dados.py --clear  # Limpa antes de popular
"""

import os
import sys
import django
import random
from datetime import datetime, timedelta

# Configurar Django
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "setup.settings")
django.setup()

from django.contrib.auth.models import User
from django.utils import timezone
from avaliacao_docente.models import (
    PerfilAluno,
    PerfilProfessor,
    Curso,
    PeriodoLetivo,
    Disciplina,
    Turma,
    MatriculaTurma,
    HorarioTurma,
    QuestionarioAvaliacao,
    CategoriaPergunta,
    PerguntaAvaliacao,
    QuestionarioPergunta,
    CicloAvaliacao,
    AvaliacaoDocente,
    RespostaAvaliacao,
    ConfiguracaoSite,
)


class PopuladorBancoDados:
    """Classe para popular banco de dados com dados de teste"""

    def __init__(self, limpar_antes=False):
        self.limpar_antes = limpar_antes
        self.usuarios = []
        self.alunos = []
        self.professores = []
        self.cursos = []
        self.periodos = []
        self.disciplinas = []
        self.turmas = []
        self.matriculas = []
        self.questionarios = []
        self.categorias = []
        self.perguntas = []
        self.ciclos = []
        self.avaliacoes = []

    def run(self):
        """Executa popula√ß√£o completa"""
        print("=" * 80)
        print("üöÄ POPULA√á√ÉO DO BANCO DE DADOS")
        print("=" * 80)

        if self.limpar_antes:
            self.limpar_dados()

        print("\nüìä Criando dados...")
        self.criar_usuarios()
        self.criar_cursos()
        self.criar_periodos_letivos()
        self.criar_disciplinas()
        self.criar_turmas()
        self.criar_matriculas()
        self.criar_horarios()
        self.criar_questionarios()
        self.criar_ciclos_avaliacao()
        self.criar_avaliacoes()
        self.criar_respostas()
        self.criar_configuracao_site()

        self.exibir_resumo()

        print("\n‚úÖ POPULA√á√ÉO CONCLU√çDA!")

    def limpar_dados(self):
        """Limpa todos os dados de teste"""
        print("\nüßπ Limpando dados existentes...")

        # Ordem reversa de depend√™ncias
        RespostaAvaliacao.objects.all().delete()
        AvaliacaoDocente.objects.all().delete()
        CicloAvaliacao.objects.all().delete()
        QuestionarioPergunta.objects.all().delete()
        PerguntaAvaliacao.objects.all().delete()
        CategoriaPergunta.objects.all().delete()
        QuestionarioAvaliacao.objects.all().delete()
        HorarioTurma.objects.all().delete()
        MatriculaTurma.objects.all().delete()
        Turma.objects.all().delete()
        Disciplina.objects.all().delete()
        PeriodoLetivo.objects.all().delete()
        Curso.objects.all().delete()
        PerfilAluno.objects.all().delete()
        PerfilProfessor.objects.all().delete()
        User.objects.filter(is_superuser=False).delete()

        print("   ‚úÖ Dados limpos")

    def criar_usuarios(self):
        """Cria usu√°rios (alunos e professores)"""
        print("\nüë• Criando usu√°rios...")

        # Verificar se j√° existem usu√°rios
        if User.objects.filter(username__startswith="prof.").exists():
            print("   ‚ÑπÔ∏è  Usu√°rios j√° existem, usando existentes...")
            self.professores = list(PerfilProfessor.objects.all())
            self.alunos = list(PerfilAluno.objects.all())
            self.usuarios = list(User.objects.filter(is_superuser=False))
            print(f"   ‚úÖ {len(self.professores)} professores encontrados")
            print(f"   ‚úÖ {len(self.alunos)} alunos encontrados")
            return

        # Professores
        nomes_professores = [
            ("Jo√£o", "Silva", "Matem√°tica"),
            ("Maria", "Santos", "F√≠sica"),
            ("Pedro", "Oliveira", "Qu√≠mica"),
            ("Ana", "Costa", "Biologia"),
            ("Carlos", "Souza", "Hist√≥ria"),
            ("Julia", "Lima", "Geografia"),
            ("Roberto", "Alves", "Portugu√™s"),
            ("Fernanda", "Rodrigues", "Ingl√™s"),
            ("Paulo", "Martins", "Programa√ß√£o"),
            ("Mariana", "Ferreira", "Algoritmos"),
            ("Lucas", "Pereira", "Estrutura de Dados"),
            ("Beatriz", "Gomes", "Banco de Dados"),
            ("Ricardo", "Barbosa", "Redes"),
            ("Camila", "Ribeiro", "Sistemas Operacionais"),
            ("Andr√©", "Carvalho", "Engenharia de Software"),
        ]

        for idx, (nome, sobrenome, especialidade) in enumerate(nomes_professores, 1):
            username = f"prof.{nome.lower()}.{sobrenome.lower()}"
            user = User.objects.create_user(
                username=username,
                email=f"{username}@escola.edu.br",
                password="senha123",
                first_name=nome,
                last_name=sobrenome,
            )

            professor = PerfilProfessor.objects.create(
                user=user,
                registro_academico=f"PROF{idx:04d}",
            )

            self.usuarios.append(user)
            self.professores.append(professor)

        print(f"   ‚úÖ {len(self.professores)} professores criados")

        # Alunos
        nomes_alunos = [
            ("Gabriel", "Oliveira"),
            ("Larissa", "Silva"),
            ("Rafael", "Santos"),
            ("Amanda", "Costa"),
            ("Bruno", "Almeida"),
            ("Carolina", "Lima"),
            ("Diego", "Ferreira"),
            ("Eduarda", "Rodrigues"),
            ("Felipe", "Martins"),
            ("Giovana", "Pereira"),
            ("Henrique", "Gomes"),
            ("Isabela", "Barbosa"),
            ("Jo√£o Pedro", "Ribeiro"),
            ("Let√≠cia", "Carvalho"),
            ("Matheus", "Ara√∫jo"),
            ("Nat√°lia", "Dias"),
            ("Ot√°vio", "Cardoso"),
            ("Patr√≠cia", "Nunes"),
            ("Rodrigo", "Teixeira"),
            ("Sophia", "Mendes"),
            ("Thiago", "Sousa"),
            ("Valentina", "Castro"),
            ("Wesley", "Azevedo"),
            ("Yasmin", "Pinto"),
            ("Arthur", "Moreira"),
            ("Bianca", "Correia"),
            ("Caio", "Monteiro"),
            ("Daniela", "Nascimento"),
            ("Enzo", "Campos"),
            ("Fernanda", "Vieira"),
            ("Guilherme", "Freitas"),
            ("Helena", "Rocha"),
            ("Igor", "Duarte"),
            ("J√∫lia", "Fernandes"),
            ("Kevin", "Ramos"),
            ("Lara", "Cunha"),
            ("Miguel", "Santana"),
            ("Nicole", "Melo"),
            ("Paulo", "Pires"),
            ("Rafaela", "Farias"),
            ("Samuel", "Cavalcanti"),
            ("Tatiane", "Macedo"),
            ("V√≠tor", "Gon√ßalves"),
            ("Wanessa", "Bezerra"),
            ("Xavier", "Miranda"),
            ("Yara", "Tavares"),
            ("Z√©lia", "Reis"),
            ("Alexandre", "Borges"),
            ("Bruna", "Lopes"),
            ("Cristiano", "Medeiros"),
        ]

        for idx, (nome, sobrenome) in enumerate(nomes_alunos, 1):
            username = f"aluno.{nome.lower().replace(' ', '')}.{sobrenome.lower()}"
            # Criar username √∫nico que servir√° como matr√≠cula
            matricula = f"ALU{2024000 + idx}"
            user = User.objects.create_user(
                username=matricula,  # Usar matr√≠cula como username
                email=f"{username[:30]}@aluno.escola.edu.br",
                password="senha123",
                first_name=nome,
                last_name=sobrenome,
            )

            aluno = PerfilAluno.objects.create(user=user, situacao="Ativo")

            self.usuarios.append(user)
            self.alunos.append(aluno)

        print(f"   ‚úÖ {len(self.alunos)} alunos criados")

    def criar_cursos(self):
        """Cria cursos"""
        print("\nüìö Criando cursos...")

        # Verificar se j√° existem cursos
        if Curso.objects.exists():
            print("   ‚ÑπÔ∏è  Cursos j√° existem, usando existentes...")
            self.cursos = list(Curso.objects.all())
            print(f"   ‚úÖ {len(self.cursos)} cursos encontrados")
            return

        cursos_data = [
            ("Ci√™ncia da Computa√ß√£o", "CC"),
            ("Sistemas de Informa√ß√£o", "SI"),
            ("Engenharia de Software", "ES"),
            ("An√°lise e Desenvolvimento de Sistemas", "ADS"),
            ("Redes de Computadores", "RC"),
            ("Seguran√ßa da Informa√ß√£o", "SEG"),
        ]

        for nome, sigla in cursos_data:
            coordenador = random.choice(self.professores)
            curso = Curso.objects.create(
                curso_nome=nome, curso_sigla=sigla, coordenador_curso=coordenador
            )
            self.cursos.append(curso)

        print(f"   ‚úÖ {len(self.cursos)} cursos criados")

    def criar_periodos_letivos(self):
        """Cria per√≠odos letivos"""
        print("\nüìÖ Criando per√≠odos letivos...")

        # Verificar se j√° existem per√≠odos
        if PeriodoLetivo.objects.exists():
            print("   ‚ÑπÔ∏è  Per√≠odos j√° existem, usando existentes...")
            self.periodos = list(PeriodoLetivo.objects.all())
            print(f"   ‚úÖ {len(self.periodos)} per√≠odos encontrados")
            return

        anos = [2023, 2024, 2025]
        semestres = [1, 2]

        for ano in anos:
            for semestre in semestres:
                periodo = PeriodoLetivo.objects.create(
                    nome=f"{ano}.{semestre}", ano=ano, semestre=semestre
                )
                self.periodos.append(periodo)

        print(f"   ‚úÖ {len(self.periodos)} per√≠odos letivos criados")

    def criar_disciplinas(self):
        """Cria disciplinas"""
        print("\nüìñ Criando disciplinas...")

        # Verificar se j√° existem disciplinas
        if Disciplina.objects.count() > 10:
            print("   ‚ÑπÔ∏è  Disciplinas j√° existem, usando existentes...")
            self.disciplinas = list(Disciplina.objects.all())
            print(f"   ‚úÖ {len(self.disciplinas)} disciplinas encontradas")
            return

        disciplinas_por_curso = {
            "CC": [
                "Algoritmos e Programa√ß√£o",
                "Estrutura de Dados",
                "Banco de Dados I",
                "Banco de Dados II",
                "Programa√ß√£o Orientada a Objetos",
                "Desenvolvimento Web",
                "Engenharia de Software",
                "Sistemas Operacionais",
                "Redes de Computadores",
                "Intelig√™ncia Artificial",
            ],
            "SI": [
                "Fundamentos de Sistemas de Informa√ß√£o",
                "An√°lise de Sistemas",
                "Gest√£o de Projetos",
                "Governan√ßa de TI",
                "Business Intelligence",
            ],
            "ES": [
                "Requisitos de Software",
                "Arquitetura de Software",
                "Testes de Software",
                "DevOps",
                "Qualidade de Software",
            ],
            "ADS": [
                "L√≥gica de Programa√ß√£o",
                "Desenvolvimento Mobile",
                "Frameworks Web",
                "APIs RESTful",
            ],
            "RC": [
                "Fundamentos de Redes",
                "Protocolo TCP/IP",
                "Seguran√ßa em Redes",
                "Administra√ß√£o de Redes",
            ],
            "SEG": [
                "Criptografia",
                "Seguran√ßa de Aplica√ß√µes",
                "Ethical Hacking",
                "Forense Digital",
            ],
        }

        tipos = ["Obrigat√≥ria", "Optativa"]

        for curso in self.cursos:
            disciplinas_curso = disciplinas_por_curso.get(curso.curso_sigla, [])

            for idx, nome_disc in enumerate(disciplinas_curso, 1):
                # Usar per√≠odos mais recentes (2024.1, 2024.2, 2025.1)
                periodo = random.choice(self.periodos[-3:])
                professor = random.choice(self.professores)

                disciplina = Disciplina.objects.create(
                    disciplina_nome=nome_disc,
                    disciplina_sigla=f"{curso.curso_sigla}{idx:02d}",
                    disciplina_tipo=random.choice(tipos),
                    curso=curso,
                    professor=professor,
                    periodo_letivo=periodo,
                )
                self.disciplinas.append(disciplina)

        print(f"   ‚úÖ {len(self.disciplinas)} disciplinas criadas")

    def criar_turmas(self):
        """Cria turmas"""
        print("\nüè´ Criando turmas...")

        # Verificar se j√° existem turmas
        if Turma.objects.count() > 10:
            print("   ‚ÑπÔ∏è  Turmas j√° existem, usando existentes...")
            self.turmas = list(Turma.objects.all())
            print(f"   ‚úÖ {len(self.turmas)} turmas encontradas")
            return

        turnos = ["matutino", "vespertino", "noturno"]

        for disciplina in self.disciplinas:
            # Algumas disciplinas t√™m m√∫ltiplas turmas
            num_turmas = random.choices([1, 2, 3], weights=[60, 30, 10])[0]

            turnos_usados = random.sample(turnos, num_turmas)

            for turno in turnos_usados:
                turma = Turma.objects.create(
                    disciplina=disciplina,
                    turno=turno,
                    data_criacao=timezone.now()
                    - timedelta(days=random.randint(30, 180)),
                )
                self.turmas.append(turma)

        print(f"   ‚úÖ {len(self.turmas)} turmas criadas")

    def criar_matriculas(self):
        """Cria matr√≠culas de alunos em turmas"""
        print("\nüìù Criando matr√≠culas...")

        # Verificar se j√° existem matr√≠culas
        if MatriculaTurma.objects.count() > 20:
            print("   ‚ÑπÔ∏è  Matr√≠culas j√° existem, usando existentes...")
            self.matriculas = list(MatriculaTurma.objects.all())
            print(f"   ‚úÖ {len(self.matriculas)} matr√≠culas encontradas")
            return

        status_opcoes = ["ativo", "trancado", "concluido"]

        for aluno in self.alunos:
            # Cada aluno se matricula em 3-7 turmas
            num_matriculas = random.randint(3, 7)
            turmas_aluno = random.sample(
                self.turmas, min(num_matriculas, len(self.turmas))
            )

            for turma in turmas_aluno:
                status = random.choices(
                    status_opcoes, weights=[80, 10, 10]  # 80% ativo
                )[0]

                matricula = MatriculaTurma.objects.create(
                    aluno=aluno,
                    turma=turma,
                    status=status,
                    data_matricula=turma.data_criacao
                    + timedelta(days=random.randint(1, 15)),
                )
                self.matriculas.append(matricula)

        print(f"   ‚úÖ {len(self.matriculas)} matr√≠culas criadas")

    def criar_horarios(self):
        """Cria hor√°rios das turmas"""
        print("\nüïê Criando hor√°rios...")

        dias_semana = [
            ("segunda-feira", 1),
            ("ter√ßa-feira", 2),
            ("quarta-feira", 3),
            ("quinta-feira", 4),
            ("sexta-feira", 5),
        ]

        horarios_turno = {
            "matutino": [("07:00", "08:40"), ("08:50", "10:30"), ("10:40", "12:20")],
            "vespertino": [("13:00", "14:40"), ("14:50", "16:30"), ("16:40", "18:20")],
            "noturno": [("18:30", "20:10"), ("20:20", "22:00")],
        }

        for turma in self.turmas:
            # 2 aulas por semana
            dias_aula = random.sample(dias_semana, 2)
            horarios_disponiveis = horarios_turno[turma.turno]
            horario = random.choice(horarios_disponiveis)

            for dia_nome, dia_num in dias_aula:
                HorarioTurma.objects.create(
                    turma=turma,
                    dia_semana=dia_num,
                    hora_inicio=horario[0],
                    hora_fim=horario[1],
                )

        horarios_count = HorarioTurma.objects.count()
        print(f"   ‚úÖ {horarios_count} hor√°rios criados")

    def criar_questionarios(self):
        """Cria question√°rios e perguntas"""
        print("\nüìã Criando question√°rios e perguntas...")

        # Verificar se j√° existem question√°rios
        if QuestionarioAvaliacao.objects.exists():
            print("   ‚ÑπÔ∏è  Question√°rios j√° existem, usando existentes...")
            self.questionarios = list(QuestionarioAvaliacao.objects.all())
            self.categorias = list(CategoriaPergunta.objects.all())
            self.perguntas = list(PerguntaAvaliacao.objects.all())
            print(f"   ‚úÖ {len(self.questionarios)} question√°rios encontrados")
            print(f"   ‚úÖ {len(self.categorias)} categorias encontradas")
            print(f"   ‚úÖ {len(self.perguntas)} perguntas encontradas")
            return

        # Criar categorias
        categorias_data = [
            ("Did√°tica", "Avalia m√©todos de ensino do professor"),
            ("Conhecimento", "Avalia dom√≠nio do conte√∫do"),
            ("Relacionamento", "Avalia relacionamento com alunos"),
            ("Recursos", "Avalia uso de recursos did√°ticos"),
            ("Avalia√ß√£o", "Avalia m√©todos avaliativos"),
            ("Pontualidade", "Avalia cumprimento de hor√°rios"),
        ]

        for nome, desc in categorias_data:
            categoria = CategoriaPergunta.objects.create(nome=nome, descricao=desc)
            self.categorias.append(categoria)

        # Criar question√°rio
        admin_user = User.objects.filter(is_superuser=True).first()
        if not admin_user:
            admin_user = User.objects.create_superuser(
                username="admin", email="admin@escola.edu.br", password="admin123"
            )

        questionario = QuestionarioAvaliacao.objects.create(
            titulo="Avalia√ß√£o Docente 2024",
            descricao="Question√°rio padr√£o para avalia√ß√£o de professores",
            ativo=True,
            criado_por=admin_user,
        )
        self.questionarios.append(questionario)

        # Criar perguntas por categoria
        perguntas_por_categoria = {
            "Did√°tica": [
                "O professor explica o conte√∫do de forma clara e objetiva?",
                "As aulas s√£o din√¢micas e motivadoras?",
                "O professor utiliza exemplos pr√°ticos?",
                "O ritmo das aulas √© adequado?",
            ],
            "Conhecimento": [
                "O professor demonstra dom√≠nio do conte√∫do?",
                "O professor consegue responder d√∫vidas com clareza?",
                "O professor relaciona teoria e pr√°tica?",
            ],
            "Relacionamento": [
                "O professor √© acess√≠vel e receptivo?",
                "O professor trata os alunos com respeito?",
                "O professor estimula a participa√ß√£o?",
            ],
            "Recursos": [
                "Os materiais did√°ticos s√£o adequados?",
                "O professor utiliza recursos tecnol√≥gicos?",
                "As refer√™ncias bibliogr√°ficas s√£o suficientes?",
            ],
            "Avalia√ß√£o": [
                "As avalia√ß√µes s√£o coerentes com o conte√∫do?",
                "Os crit√©rios de avalia√ß√£o s√£o claros?",
                "O feedback sobre avalia√ß√µes √© adequado?",
            ],
            "Pontualidade": [
                "O professor cumpre os hor√°rios de aula?",
                "O professor respeita o tempo de intervalo?",
            ],
        }

        ordem = 1
        for categoria in self.categorias:
            perguntas_cat = perguntas_por_categoria.get(categoria.nome, [])

            for texto in perguntas_cat:
                pergunta = PerguntaAvaliacao.objects.create(
                    categoria=categoria,
                    enunciado=texto,
                    tipo="likert",
                    obrigatoria=True,
                )
                self.perguntas.append(pergunta)

                # Associar ao question√°rio
                QuestionarioPergunta.objects.create(
                    questionario=questionario,
                    pergunta=pergunta,
                    ordem_no_questionario=ordem,
                )
                ordem += 1

        # Adicionar pergunta aberta
        pergunta_aberta = PerguntaAvaliacao.objects.create(
            categoria=self.categorias[0],
            enunciado="Coment√°rios ou sugest√µes adicionais:",
            tipo="texto_livre",
            obrigatoria=False,
        )
        self.perguntas.append(pergunta_aberta)

        QuestionarioPergunta.objects.create(
            questionario=questionario,
            pergunta=pergunta_aberta,
            ordem_no_questionario=ordem,
        )

        print(f"   ‚úÖ {len(self.categorias)} categorias criadas")
        print(f"   ‚úÖ {len(self.questionarios)} question√°rio criado")
        print(f"   ‚úÖ {len(self.perguntas)} perguntas criadas")

    def criar_ciclos_avaliacao(self):
        """Cria ciclos de avalia√ß√£o"""
        print("\nüîÑ Criando ciclos de avalia√ß√£o...")

        # Verificar se j√° existem ciclos
        if CicloAvaliacao.objects.exists():
            print("   ‚ÑπÔ∏è  Ciclos j√° existem, usando existentes...")
            self.ciclos = list(CicloAvaliacao.objects.all())
            print(f"   ‚úÖ {len(self.ciclos)} ciclos encontrados")
            return

        questionario = self.questionarios[0]

        # Ciclo 2024.1 (encerrado)
        periodo_2024_1 = PeriodoLetivo.objects.get(nome="2024.1")
        ciclo_2024_1 = CicloAvaliacao.objects.create(
            nome="Ciclo 2024.1",
            periodo_letivo=periodo_2024_1,
            questionario=questionario,
            data_inicio=(timezone.now() - timedelta(days=120)),
            data_fim=(timezone.now() - timedelta(days=60)),
            enviar_lembrete_email=True,
            criado_por=self.professores[0].user,
        )

        # Adicionar turmas do per√≠odo 2024.1
        turmas_2024_1 = [
            t for t in self.turmas if t.disciplina.periodo_letivo.nome == "2024.1"
        ]
        ciclo_2024_1.turmas.set(turmas_2024_1[:20])  # Limitar para performance

        self.ciclos.append(ciclo_2024_1)

        # Ciclo 2024.2 (em andamento)
        periodo_2024_2 = PeriodoLetivo.objects.get(nome="2024.2")
        ciclo_2024_2 = CicloAvaliacao.objects.create(
            nome="Ciclo 2024.2",
            periodo_letivo=periodo_2024_2,
            questionario=questionario,
            data_inicio=(timezone.now() - timedelta(days=30)),
            data_fim=(timezone.now() + timedelta(days=30)),
            enviar_lembrete_email=True,
            criado_por=self.professores[0].user,
        )

        turmas_2024_2 = [
            t for t in self.turmas if t.disciplina.periodo_letivo.nome == "2024.2"
        ]
        ciclo_2024_2.turmas.set(turmas_2024_2[:20])

        self.ciclos.append(ciclo_2024_2)

        # Ciclo 2025.1 (futuro)
        periodo_2025_1 = PeriodoLetivo.objects.get(nome="2025.1")
        ciclo_2025_1 = CicloAvaliacao.objects.create(
            nome="Ciclo 2025.1",
            periodo_letivo=periodo_2025_1,
            questionario=questionario,
            data_inicio=(timezone.now() + timedelta(days=60)),
            data_fim=(timezone.now() + timedelta(days=150)),
            enviar_lembrete_email=True,
            criado_por=self.professores[0].user,
        )

        turmas_2025_1 = [
            t for t in self.turmas if t.disciplina.periodo_letivo.nome == "2025.1"
        ]
        ciclo_2025_1.turmas.set(turmas_2025_1[:20])

        self.ciclos.append(ciclo_2025_1)

        print(f"   ‚úÖ {len(self.ciclos)} ciclos de avalia√ß√£o criados")

    def criar_avaliacoes(self):
        """Cria avalia√ß√µes (via signal autom√°tico ao adicionar turmas ao ciclo)"""
        print("\n‚≠ê Criando avalia√ß√µes...")

        # As avalia√ß√µes s√£o criadas automaticamente por signals
        # Vamos apenas contar
        avaliacoes = AvaliacaoDocente.objects.all()
        self.avaliacoes = list(avaliacoes)

        print(f"   ‚úÖ {len(self.avaliacoes)} avalia√ß√µes criadas (via signals)")

    def criar_respostas(self):
        """Cria respostas de alunos"""
        print("\nüí¨ Criando respostas...")

        # Pegar avalia√ß√µes do ciclo 2024.1 (encerrado) para ter respostas
        avaliacoes_ciclo_1 = [a for a in self.avaliacoes if a.ciclo == self.ciclos[0]]

        respostas_likert = [1, 2, 3, 4, 5]
        comentarios_positivos = [
            "Excelente professor, muito did√°tico!",
            "Aulas muito boas, aprendi bastante.",
            "Professor competente e atencioso.",
            "√ìtima did√°tica e dom√≠nio do conte√∫do.",
            "Aulas din√¢micas e interessantes.",
        ]
        comentarios_negativos = [
            "Poderia ser mais din√¢mico.",
            "Alguns t√≥picos ficaram confusos.",
            "Ritmo das aulas um pouco r√°pido.",
        ]

        respostas_count = 0

        for avaliacao in avaliacoes_ciclo_1[:30]:  # Limitar para performance
            # 50-80% dos alunos respondem
            matriculas_turma = MatriculaTurma.objects.filter(
                turma=avaliacao.turma, status="ativo"
            )

            num_respondentes = int(matriculas_turma.count() * random.uniform(0.5, 0.8))
            respondentes = random.sample(
                list(matriculas_turma), min(num_respondentes, matriculas_turma.count())
            )

            for matricula in respondentes:
                # Marcar avalia√ß√£o como em andamento
                if avaliacao.status == "pendente":
                    avaliacao.status = "em_andamento"
                    avaliacao.save()

                # Responder perguntas Likert
                perguntas_likert = [
                    p for p in self.perguntas if p.tipo_pergunta == "escala_likert"
                ]

                # Tend√™ncia: 70% respostas positivas (4-5), 20% neutras (3), 10% negativas (1-2)
                for pergunta in perguntas_likert:
                    nota = random.choices(
                        respostas_likert,
                        weights=[5, 5, 20, 35, 35],  # Distribui√ß√£o realista
                    )[0]

                    RespostaAvaliacao.objects.create(
                        avaliacao=avaliacao, pergunta=pergunta, resposta_likert=nota
                    )
                    respostas_count += 1

                # Responder pergunta aberta (50% respondem)
                if random.random() < 0.5:
                    pergunta_aberta = [
                        p for p in self.perguntas if p.tipo_pergunta == "texto_longo"
                    ][0]

                    # Coment√°rio baseado na m√©dia das notas
                    media_notas = (
                        sum(
                            [
                                r.resposta_likert
                                for r in RespostaAvaliacao.objects.filter(
                                    avaliacao=avaliacao
                                )
                            ]
                        )
                        / RespostaAvaliacao.objects.filter(avaliacao=avaliacao).count()
                    )

                    if media_notas >= 4:
                        comentario = random.choice(comentarios_positivos)
                    elif media_notas >= 3:
                        comentario = "Bom professor, algumas melhorias s√£o poss√≠veis."
                    else:
                        comentario = random.choice(comentarios_negativos)

                    RespostaAvaliacao.objects.create(
                        avaliacao=avaliacao,
                        pergunta=pergunta_aberta,
                        resposta_texto=comentario,
                    )
                    respostas_count += 1

                # Marcar avalia√ß√£o como conclu√≠da
                avaliacao.status = "concluida"
                avaliacao.data_conclusao = timezone.now() - timedelta(
                    days=random.randint(1, 30)
                )
                avaliacao.save()

        print(f"   ‚úÖ {respostas_count} respostas criadas")

    def criar_configuracao_site(self):
        """Cria configura√ß√£o do site"""
        print("\n‚öôÔ∏è Criando configura√ß√£o do site...")

        if not ConfiguracaoSite.objects.exists():
            ConfiguracaoSite.objects.create(
                metodo_envio_email="smtp", email_notificacao_erros="admin@escola.edu.br"
            )
            print("   ‚úÖ Configura√ß√£o do site criada")
        else:
            print("   ‚ÑπÔ∏è  Configura√ß√£o do site j√° existe")

    def exibir_resumo(self):
        """Exibe resumo dos dados criados"""
        print("\n" + "=" * 80)
        print("üìä RESUMO DOS DADOS CRIADOS")
        print("=" * 80)

        print(f"\nüë• Usu√°rios:")
        print(f"   - Professores: {len(self.professores)}")
        print(f"   - Alunos: {len(self.alunos)}")
        print(f"   - Total: {len(self.usuarios)}")

        print(f"\nüìö Acad√™mico:")
        print(f"   - Cursos: {len(self.cursos)}")
        print(f"   - Per√≠odos letivos: {len(self.periodos)}")
        print(f"   - Disciplinas: {len(self.disciplinas)}")
        print(f"   - Turmas: {len(self.turmas)}")
        print(f"   - Matr√≠culas: {len(self.matriculas)}")
        print(f"   - Hor√°rios: {HorarioTurma.objects.count()}")

        print(f"\nüìã Avalia√ß√µes:")
        print(f"   - Question√°rios: {len(self.questionarios)}")
        print(f"   - Categorias: {len(self.categorias)}")
        print(f"   - Perguntas: {len(self.perguntas)}")
        print(f"   - Ciclos: {len(self.ciclos)}")
        print(f"   - Avalia√ß√µes: {len(self.avaliacoes)}")
        print(f"   - Respostas: {RespostaAvaliacao.objects.count()}")

        print(f"\n‚öôÔ∏è Configura√ß√£o:")
        print(f"   - Configura√ß√µes do site: {ConfiguracaoSite.objects.count()}")

        # Estat√≠sticas adicionais
        print(f"\nüìà Estat√≠sticas:")
        avaliacoes_concluidas = AvaliacaoDocente.objects.filter(
            status="concluida"
        ).count()
        avaliacoes_pendentes = AvaliacaoDocente.objects.filter(
            status="pendente"
        ).count()
        print(f"   - Avalia√ß√µes conclu√≠das: {avaliacoes_concluidas}")
        print(f"   - Avalia√ß√µes pendentes: {avaliacoes_pendentes}")

        if avaliacoes_concluidas > 0:
            taxa_resposta = (avaliacoes_concluidas / len(self.avaliacoes)) * 100
            print(f"   - Taxa de resposta: {taxa_resposta:.1f}%")

        media_matriculas = len(self.matriculas) / len(self.alunos) if self.alunos else 0
        print(f"   - M√©dia de matr√≠culas por aluno: {media_matriculas:.1f}")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description="Popular banco de dados com dados de teste"
    )
    parser.add_argument(
        "--clear", action="store_true", help="Limpar dados antes de popular"
    )
    args = parser.parse_args()

    populador = PopuladorBancoDados(limpar_antes=args.clear)
    populador.run()
