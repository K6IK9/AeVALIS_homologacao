"""
Script de Valida√ß√£o - Consist√™ncia de Dados Turma

‚ö†Ô∏è OBSOLETO - Este script foi utilizado antes da migra√ß√£o 0008 que removeu
os campos redundantes 'professor' e 'periodo_letivo' de Turma.

HIST√ìRICO:
- Validava se turma.professor == disciplina.professor
- Validava se turma.periodo_letivo == disciplina.periodo_letivo
- Utilizado antes da migration 0008_remover_campos_redundantes_turma

STATUS ATUAL (p√≥s-migra√ß√£o 0008):
- Os campos professor e periodo_letivo foram REMOVIDOS de Turma
- Agora Turma possui apenas @property que delega para disciplina
- Este script n√£o √© mais necess√°rio e est√° mantido apenas para refer√™ncia hist√≥rica

Para executar valida√ß√µes atuais, use os testes em avaliacao_docente/tests.py
"""

import os
import sys

print("=" * 80)
print("‚ö†Ô∏è  ESTE SCRIPT EST√Å OBSOLETO")
print("=" * 80)
print("\nOs campos 'professor' e 'periodo_letivo' foram removidos de Turma")
print("na migra√ß√£o 0008_remover_campos_redundantes_turma.")
print("\nAgora esses dados s√£o acessados via properties:")
print("  ‚Ä¢ turma.professor ‚Üí turma.disciplina.professor")
print("  ‚Ä¢ turma.periodo_letivo ‚Üí turma.disciplina.periodo_letivo")
print("\nEste arquivo est√° mantido apenas para refer√™ncia hist√≥rica.")
print("Para testes atuais, veja: avaliacao_docente/tests.py")
print("=" * 80)
sys.exit(0)


# ============================================================================
# C√ìDIGO HIST√ìRICO ABAIXO - N√ÉO MAIS FUNCIONAL AP√ìS MIGRA√á√ÉO 0008
# ============================================================================
"""
import django

# Adicionar o diret√≥rio raiz do projeto ao path
sys.path.append("c:/Users/kaike_matos/Documents/Docs/avaliacao_docente_suap")

# Configurar o Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "setup.settings")
django.setup()

from django.contrib.auth.models import User
from avaliacao_docente.models import Turma
from django.db.models import Q


def validar_consistencia_turmas():
        print("\n‚úÖ Nenhuma turma encontrada. Banco vazio ou sem dados de teste.")
        return True

    # Listas para armazenar inconsist√™ncias
    inconsistencias_professor = []
    inconsistencias_periodo = []
    turmas_ok = 0

    print("\nüîÑ Verificando consist√™ncia...")

    for turma in turmas:
        tem_erro = False

        # Verificar professor
        if turma.professor_id != turma.disciplina.professor_id:
            inconsistencias_professor.append(
                {
                    "turma_id": turma.id,
                    "codigo": turma.codigo_turma,
                    "turma_professor": (
                        turma.professor.user.get_full_name()
                        if turma.professor
                        else "None"
                    ),
                    "disciplina_professor": (
                        turma.disciplina.professor.user.get_full_name()
                        if turma.disciplina.professor
                        else "None"
                    ),
                }
            )
            tem_erro = True

        # Verificar per√≠odo letivo
        if turma.periodo_letivo_id != turma.disciplina.periodo_letivo_id:
            inconsistencias_periodo.append(
                {
                    "turma_id": turma.id,
                    "codigo": turma.codigo_turma,
                    "turma_periodo": (
                        str(turma.periodo_letivo) if turma.periodo_letivo else "None"
                    ),
                    "disciplina_periodo": (
                        str(turma.disciplina.periodo_letivo)
                        if turma.disciplina.periodo_letivo
                        else "None"
                    ),
                }
            )
            tem_erro = True

        if not tem_erro:
            turmas_ok += 1

    # Exibir resultados
    print("\n" + "=" * 70)
    print("üìã RESULTADO DA VALIDA√á√ÉO")
    print("=" * 70)

    print(f"\n‚úÖ Turmas consistentes: {turmas_ok}/{total_turmas}")

    if inconsistencias_professor:
        print(f"\n‚ùå INCONSIST√äNCIAS DE PROFESSOR: {len(inconsistencias_professor)}")
        print("-" * 70)
        for inc in inconsistencias_professor:
            print(f"  Turma ID: {inc['turma_id']} ({inc['codigo']})")
            print(f"    ‚Ä¢ Turma.professor: {inc['turma_professor']}")
            print(f"    ‚Ä¢ Disciplina.professor: {inc['disciplina_professor']}")
            print()

    if inconsistencias_periodo:
        print(f"\n‚ùå INCONSIST√äNCIAS DE PER√çODO LETIVO: {len(inconsistencias_periodo)}")
        print("-" * 70)
        for inc in inconsistencias_periodo:
            print(f"  Turma ID: {inc['turma_id']} ({inc['codigo']})")
            print(f"    ‚Ä¢ Turma.periodo_letivo: {inc['turma_periodo']}")
            print(f"    ‚Ä¢ Disciplina.periodo_letivo: {inc['disciplina_periodo']}")
            print()

    # Conclus√£o
    print("=" * 70)

    if not inconsistencias_professor and not inconsistencias_periodo:
        print("\n‚úÖ VALIDA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("   Todos os dados est√£o consistentes.")
        print("   Seguro para prosseguir com a migra√ß√£o.\n")
        return True
    else:
        print("\n‚ö†Ô∏è  VALIDA√á√ÉO FALHOU!")
        print("   Foram encontradas inconsist√™ncias nos dados.")
        print("   CORRIJA os dados antes de prosseguir com a migra√ß√£o.\n")
        print("üí° SUGEST√ÉO:")
        print("   Execute o script de corre√ß√£o autom√°tica ou corrija manualmente")
        print("   as inconsist√™ncias listadas acima.\n")
        return False


def corrigir_inconsistencias():
    """
    Corrige automaticamente as inconsist√™ncias encontradas
    copiando os dados de disciplina para turma
    """
    print("\nüîß Deseja corrigir automaticamente as inconsist√™ncias? (s/n): ", end="")
    resposta = input().lower().strip()

    if resposta != "s":
        print("‚ùå Corre√ß√£o cancelada pelo usu√°rio.")
        return

    print("\nüîÑ Iniciando corre√ß√£o autom√°tica...")

    turmas = Turma.objects.select_related(
        "disciplina", "disciplina__professor", "disciplina__periodo_letivo"
    ).all()

    corrigidas = 0

    for turma in turmas:
        modificou = False

        if turma.professor_id != turma.disciplina.professor_id:
            turma.professor = turma.disciplina.professor
            modificou = True

        if turma.periodo_letivo_id != turma.disciplina.periodo_letivo_id:
            turma.periodo_letivo = turma.disciplina.periodo_letivo
            modificou = True

        if modificou:
            turma.save()
            corrigidas += 1
            print(f"  ‚úÖ Turma {turma.codigo_turma} corrigida")

    print(f"\n‚úÖ Corre√ß√£o conclu√≠da! {corrigidas} turma(s) corrigida(s).")
    print("\nüîÑ Executando nova valida√ß√£o...")
    validar_consistencia_turmas()


if __name__ == "__main__":
    print("\n" + "=" * 70)
    print("  VALIDA√á√ÉO DE CONSIST√äNCIA - TURMAS")
    print("=" * 70)

    resultado = validar_consistencia_turmas()

    if not resultado:
        corrigir_inconsistencias()
